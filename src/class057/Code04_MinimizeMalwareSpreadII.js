/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function(graph, initial) {
   var length = graph.length
   build(length, initial)
   for(var i = 0; i < length; i++){
       for (var j = 0; j < length; j++){
            if ((graph[i][j] == 1) && (i != j) && !virus[i] && !virus[j]){
               union(i, j)
            }
       }
   }
   for (var k = 0; k < initial.length; k++){
      var vir = initial[k]
      for (var i = 0; i < length; i++){
          if ((vir != i) && (graph[vir][i] == 1) && (!virus[i])){
               var ri = find(i)
               if (virusConnect[ri] == -1){
                   virusConnect[ri] = vir
               } else if ((virusConnect[ri] >= 0) && (virusConnect[ri] != vir)){
                  virusConnect[ri] = -2
               }
          }
      }
   }
    // 步骤3: 统计拯救节点数
   const virusCnt = {};
   for (const node of initial) virusCnt[node] = 0; // 初始化
   for (var m = 0; m < length; m++){
     if ((!virus[m]) && (father[m] == m) && (virusConnect[m] >= 0)){
          virusCnt[virusConnect[m]] += size[m]
     }
   }
   initial.sort((a,b)=>{return a - b})
   var max = -Infinity
   var index = initial[0]
   for(var item of initial){
      var total = virusCnt[item] + 1
      if (total > max){
          max = total
          index = item
      }
   }
   return index
};

var setCount = 0
var father = []
var virus = []
var virusConnect = []
var size = []

function build(length, initial){
    father = Array(length)
    size = Array(length)
    virus = Array(length)
    virusConnect = Array(length).fill(-1)
    for (var i = 0; i < length; i++){
        father[i] = i
        size[i] = 1
        virus[i] = initial.includes(i)
    }
}

function isSameSet(i, j){
    return find(i) == find(j)
}

function union(i, j){
    var fi = find(i)
    var fj = find(j)
    if (fi != fj){
        if (size[fi] > size[fj]){
            size[fi] += size[fj]
            father[fj] = fi
        } else {
            size[fj] += size[fi]
            father[fi] = fj 
        }
    }
}

function find(i){
    var stack = []
    while (i !== father[i]){
       stack.push(i)
       i = father[i]
    }
    while(stack.length > 0){
        var tmp = stack.pop()
        father[tmp] = i
    }
    return i
}